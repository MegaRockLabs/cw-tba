{
  "contract_name": "cw83_tba_registry",
  "contract_version": "0.10.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "params"
    ],
    "properties": {
      "params": {
        "$ref": "#/definitions/RegistryParams_for_Nullable_Empty"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Empty": {
        "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
        "type": "object"
      },
      "RegistryParams_for_Nullable_Empty": {
        "type": "object",
        "required": [
          "allowed_code_ids",
          "creation_fees",
          "managers"
        ],
        "properties": {
          "allowed_code_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "creation_fees": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          },
          "extension": {
            "anyOf": [
              {
                "$ref": "#/definitions/Empty"
              },
              {
                "type": "null"
              }
            ]
          },
          "managers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Update the owner of a token-bound account",
        "type": "object",
        "required": [
          "update_account_ownership"
        ],
        "properties": {
          "update_account_ownership": {
            "type": "object",
            "required": [
              "token_info"
            ],
            "properties": {
              "new_account_data": {
                "description": "New data of the account used for (cw81 signature verification)",
                "anyOf": [
                  {
                    "$ref": "#/definitions/CredentialData"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "token_info": {
                "description": "Non-Fungible Token Info that the existing account is linked to",
                "allOf": [
                  {
                    "$ref": "#/definitions/TokenInfo"
                  }
                ]
              },
              "update_for": {
                "description": "Admin only parameter to update the account on behalf of another user that holds the token",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_account_data"
        ],
        "properties": {
          "update_account_data": {
            "type": "object",
            "required": [
              "token_info",
              "update_op"
            ],
            "properties": {
              "credential": {
                "description": "Signed information to update the account",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Credential"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "token_info": {
                "description": "Non-Fungible Token Info that the existing account is linked to",
                "allOf": [
                  {
                    "$ref": "#/definitions/TokenInfo"
                  }
                ]
              },
              "update_op": {
                "description": "New data on the account",
                "allOf": [
                  {
                    "$ref": "#/definitions/UpdateOperation_for_CredentialData"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Create a new token-bound account. Access the old one will be forever lost",
        "type": "object",
        "required": [
          "reset_account"
        ],
        "properties": {
          "reset_account": {
            "$ref": "#/definitions/CreateAccountMsg_for_TokenAccount_for_ExecuteAccountMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Migrate an account to the newer code version if the code id is allowed",
        "type": "object",
        "required": [
          "migrate_account"
        ],
        "properties": {
          "migrate_account": {
            "type": "object",
            "required": [
              "msg",
              "new_code_id",
              "token_info"
            ],
            "properties": {
              "msg": {
                "description": "Migration message to be passed to the account contract",
                "allOf": [
                  {
                    "$ref": "#/definitions/Binary"
                  }
                ]
              },
              "new_code_id": {
                "description": "New code id to migrate the account to",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "token_info": {
                "description": "Non-Fungible Token Info that the existing account is linked to",
                "allOf": [
                  {
                    "$ref": "#/definitions/TokenInfo"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "admin_update"
        ],
        "properties": {
          "admin_update": {
            "$ref": "#/definitions/SudoMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "create_account"
        ],
        "properties": {
          "create_account": {
            "$ref": "#/definitions/CreateAccountMsg_for_TokenAccount_for_ExecuteAccountMsg"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "BankMsg": {
        "description": "The message types of the bank module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/bank/v1beta1/tx.proto",
        "oneOf": [
          {
            "description": "Sends native tokens from the contract to the given address.\n\nThis is translated to a [MsgSend](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/bank/v1beta1/tx.proto#L19-L28). `from_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "send"
            ],
            "properties": {
              "send": {
                "type": "object",
                "required": [
                  "amount",
                  "to_address"
                ],
                "properties": {
                  "amount": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "to_address": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This will burn the given coins from the contract's account. There is no Cosmos SDK message that performs this, but it can be done by calling the bank keeper. Important if a contract controls significant token supply that must be retired.",
            "type": "object",
            "required": [
              "burn"
            ],
            "properties": {
              "burn": {
                "type": "object",
                "required": [
                  "amount"
                ],
                "properties": {
                  "amount": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Coin"
                    }
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "BasicAllowance": {
        "type": "object",
        "required": [
          "spend_limit"
        ],
        "properties": {
          "expiration": {
            "anyOf": [
              {
                "$ref": "#/definitions/Timestamp"
              },
              {
                "type": "null"
              }
            ]
          },
          "spend_limit": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          }
        },
        "additionalProperties": false
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Caller": {
        "type": "string"
      },
      "ClientData": {
        "description": "The client data object defined by the WebAuthn standard.",
        "type": "object",
        "required": [
          "challenge",
          "crossOrigin",
          "origin",
          "type"
        ],
        "properties": {
          "challenge": {
            "description": "Base64url encoded challenge string",
            "type": "string"
          },
          "crossOrigin": {
            "description": "Whether the passkey was registed with a cross-origin device",
            "type": "boolean"
          },
          "origin": {
            "description": "Origin of the client where the passkey was created",
            "type": "string"
          },
          "other_keys_can_be_added_here": {
            "type": [
              "string",
              "null"
            ]
          },
          "type": {
            "description": "Type of the client data. The contract expects \"webauthn.get\"",
            "type": "string"
          }
        }
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "CosmosArbitrary": {
        "type": "object",
        "required": [
          "address",
          "message",
          "pubkey",
          "signature"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "message": {
            "$ref": "#/definitions/Binary"
          },
          "pubkey": {
            "$ref": "#/definitions/Binary"
          },
          "signature": {
            "$ref": "#/definitions/Binary"
          }
        },
        "additionalProperties": false
      },
      "CosmosMsg_for_Empty": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "bank"
            ],
            "properties": {
              "bank": {
                "$ref": "#/definitions/BankMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "custom"
            ],
            "properties": {
              "custom": {
                "$ref": "#/definitions/Empty"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "staking"
            ],
            "properties": {
              "staking": {
                "$ref": "#/definitions/StakingMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "distribution"
            ],
            "properties": {
              "distribution": {
                "$ref": "#/definitions/DistributionMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "A Stargate message encoded the same way as a protobuf [Any](https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/any.proto). This is the same structure as messages in `TxBody` from [ADR-020](https://github.com/cosmos/cosmos-sdk/blob/master/docs/architecture/adr-020-protobuf-transaction-encoding.md)",
            "type": "object",
            "required": [
              "stargate"
            ],
            "properties": {
              "stargate": {
                "type": "object",
                "required": [
                  "type_url",
                  "value"
                ],
                "properties": {
                  "type_url": {
                    "type": "string"
                  },
                  "value": {
                    "$ref": "#/definitions/Binary"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ibc"
            ],
            "properties": {
              "ibc": {
                "$ref": "#/definitions/IbcMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "wasm"
            ],
            "properties": {
              "wasm": {
                "$ref": "#/definitions/WasmMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "gov"
            ],
            "properties": {
              "gov": {
                "$ref": "#/definitions/GovMsg"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "CreateAccountMsg_for_TokenAccount_for_ExecuteAccountMsg": {
        "description": "Inner type of ExecuteMsg::CreateAccount defined by cw83 for account registries",
        "type": "object",
        "required": [
          "account_data",
          "chain_id",
          "code_id"
        ],
        "properties": {
          "account_data": {
            "description": "Payload data for account configuration",
            "allOf": [
              {
                "$ref": "#/definitions/TokenAccount_for_ExecuteAccountMsg"
              }
            ]
          },
          "chain_id": {
            "description": "Chain identifier of a network where the account will be created",
            "type": "string"
          },
          "code_id": {
            "description": "Code id of smart account to instantiate",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "Credential": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "native"
            ],
            "properties": {
              "native": {
                "$ref": "#/definitions/Caller"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "eth_typed_data"
            ],
            "properties": {
              "eth_typed_data": {
                "$ref": "#/definitions/EthTypedData"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "cosmos_arbitrary"
            ],
            "properties": {
              "cosmos_arbitrary": {
                "$ref": "#/definitions/CosmosArbitrary"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "passkey"
            ],
            "properties": {
              "passkey": {
                "$ref": "#/definitions/PasskeyCredential"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ed25519"
            ],
            "properties": {
              "ed25519": {
                "$ref": "#/definitions/Ed25519"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "CredentialData": {
        "description": "CredentialData is wrapper for dealing with multiple credentials at the same time. Implements both `Verifiable` and `CredentialWrapper` traits.",
        "type": "object",
        "required": [
          "credentials"
        ],
        "properties": {
          "credentials": {
            "description": "The list of credentials to be verified",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Credential"
            }
          },
          "override_primary": {
            "description": "An optional flag that indicates whether that",
            "type": [
              "boolean",
              "null"
            ]
          },
          "pre_validate": {
            "description": "An optional flag that tell us whether to perform an extensive validation before verifying each one thouroughly",
            "type": [
              "boolean",
              "null"
            ]
          },
          "primary_index": {
            "description": "An optional index indicating which credential will be used as the primary. Default to the first one",
            "type": [
              "integer",
              "null"
            ],
            "format": "uint",
            "minimum": 0.0
          },
          "use_native": {
            "description": "A flag indicating that the environment can derive an additional credential that isn't included in the list of credentials directly. Most typically it's the transaction signer that has been verified beforehand but can be any other authorized dicated by the environment / smart contract logic",
            "type": [
              "boolean",
              "null"
            ]
          }
        },
        "additionalProperties": false
      },
      "DistributionMsg": {
        "description": "The message types of the distribution module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto",
        "oneOf": [
          {
            "description": "This is translated to a [MsgSetWithdrawAddress](https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto#L29-L37). `delegator_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "set_withdraw_address"
            ],
            "properties": {
              "set_withdraw_address": {
                "type": "object",
                "required": [
                  "address"
                ],
                "properties": {
                  "address": {
                    "description": "The `withdraw_address`",
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This is translated to a [[MsgWithdrawDelegatorReward](https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto#L42-L50). `delegator_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "withdraw_delegator_reward"
            ],
            "properties": {
              "withdraw_delegator_reward": {
                "type": "object",
                "required": [
                  "validator"
                ],
                "properties": {
                  "validator": {
                    "description": "The `validator_address`",
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Ed25519": {
        "type": "object",
        "required": [
          "message",
          "pubkey",
          "signature"
        ],
        "properties": {
          "message": {
            "$ref": "#/definitions/Binary"
          },
          "pubkey": {
            "$ref": "#/definitions/Binary"
          },
          "signature": {
            "$ref": "#/definitions/Binary"
          }
        },
        "additionalProperties": false
      },
      "Eip712Domain": {
        "type": "object",
        "properties": {
          "chainId": {
            "description": "The EIP-155 chain id. The user-agent should refuse signing if it does not match the currently active chain.",
            "anyOf": [
              {
                "$ref": "#/definitions/Uint64"
              },
              {
                "type": "null"
              }
            ]
          },
          "name": {
            "description": "The user readable name of signing domain, i.e. the name of the DApp or the protocol.",
            "type": [
              "string",
              "null"
            ]
          },
          "salt": {
            "description": "A disambiguating salt for the protocol. This can be used as a domain separator of last resort.",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "maxItems": 32,
            "minItems": 32
          },
          "verifyingContract": {
            "description": "The address of the contract that will verify the signature.",
            "type": [
              "string",
              "null"
            ]
          },
          "version": {
            "description": "The current major version of the signing domain. Signatures from different versions are not compatible.",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "additionalProperties": false
      },
      "Eip712DomainType": {
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Eip712Message": {
        "description": "EIP-712 message structure",
        "type": "object"
      },
      "Empty": {
        "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
        "type": "object"
      },
      "EthTypedData": {
        "type": "object",
        "required": [
          "domain",
          "message",
          "primaryType",
          "signature",
          "signer",
          "types"
        ],
        "properties": {
          "cache": {
            "writeOnly": true,
            "anyOf": [
              {
                "$ref": "#/definitions/EthTypedInfo"
              },
              {
                "type": "null"
              }
            ]
          },
          "domain": {
            "$ref": "#/definitions/Eip712Domain"
          },
          "message": {
            "$ref": "#/definitions/Eip712Message"
          },
          "message_property": {
            "type": [
              "string",
              "null"
            ]
          },
          "primaryType": {
            "type": "string"
          },
          "signature": {
            "$ref": "#/definitions/Binary"
          },
          "signer": {
            "type": "string"
          },
          "types": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Eip712DomainType"
              }
            }
          }
        },
        "additionalProperties": false
      },
      "EthTypedInfo": {
        "type": "object",
        "required": [
          "pre_hash",
          "salt_used"
        ],
        "properties": {
          "addr_hash": {
            "type": [
              "string",
              "null"
            ]
          },
          "pre_hash": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          },
          "salt_used": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ExecuteAccountMsg": {
        "oneOf": [
          {
            "description": "Proxy method for executing cosmos messages Wasm and Stargate messages aren't supported Only the current holder can execute this method",
            "type": "object",
            "required": [
              "execute"
            ],
            "properties": {
              "execute": {
                "type": "object",
                "required": [
                  "msgs"
                ],
                "properties": {
                  "msgs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CosmosMsg_for_Empty"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Mint NFTs directly from token account",
            "type": "object",
            "required": [
              "mint_token"
            ],
            "properties": {
              "mint_token": {
                "type": "object",
                "required": [
                  "minter",
                  "msg"
                ],
                "properties": {
                  "minter": {
                    "description": "Contract address of the minter",
                    "type": "string"
                  },
                  "msg": {
                    "$ref": "#/definitions/Binary"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Simple NFT transfer",
            "type": "object",
            "required": [
              "transfer_token"
            ],
            "properties": {
              "transfer_token": {
                "type": "object",
                "required": [
                  "collection",
                  "recipient",
                  "token_id"
                ],
                "properties": {
                  "collection": {
                    "description": "Contract address of the collection",
                    "type": "string"
                  },
                  "recipient": {
                    "description": "Recipient address",
                    "type": "string"
                  },
                  "token_id": {
                    "description": "Token id",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Owner only method to make the account forget about certain tokens",
            "type": "object",
            "required": [
              "forget_tokens"
            ],
            "properties": {
              "forget_tokens": {
                "type": "object",
                "required": [
                  "collection",
                  "token_ids"
                ],
                "properties": {
                  "collection": {
                    "description": "Contract address of the collection",
                    "type": "string"
                  },
                  "token_ids": {
                    "description": "Optional list of token ids to forget. If not provided, all tokens will be forgotten",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Owner only method that make the account aware of certain tokens to simplify the future queries",
            "type": "object",
            "required": [
              "update_known_tokens"
            ],
            "properties": {
              "update_known_tokens": {
                "type": "object",
                "required": [
                  "collection"
                ],
                "properties": {
                  "collection": {
                    "description": "Contract address of the collection",
                    "type": "string"
                  },
                  "limit": {
                    "description": "Limit of the tokens to return",
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "start_after": {
                    "description": "Token id to start after",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "fee_grant"
            ],
            "properties": {
              "fee_grant": {
                "type": "object",
                "required": [
                  "grantee"
                ],
                "properties": {
                  "allowance": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/BasicAllowance"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "grantee": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Registry only method to call when a token is moved to escrow",
            "type": "object",
            "required": [
              "freeze"
            ],
            "properties": {
              "freeze": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Registry only method to call after the token is released from escrow",
            "type": "object",
            "required": [
              "unfreeze"
            ],
            "properties": {
              "unfreeze": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "GovMsg": {
        "description": "This message type allows the contract interact with the [x/gov] module in order to cast votes.\n\n[x/gov]: https://github.com/cosmos/cosmos-sdk/tree/v0.45.12/x/gov\n\n## Examples\n\nCast a simple vote:\n\n``` # use cosmwasm_std::{ #     HexBinary, #     Storage, Api, Querier, DepsMut, Deps, entry_point, Env, StdError, MessageInfo, #     Response, QueryResponse, # }; # type ExecuteMsg = (); use cosmwasm_std::{GovMsg, VoteOption};\n\n#[entry_point] pub fn execute( deps: DepsMut, env: Env, info: MessageInfo, msg: ExecuteMsg, ) -> Result<Response, StdError> { // ... Ok(Response::new().add_message(GovMsg::Vote { proposal_id: 4, vote: VoteOption::Yes, })) } ```\n\nCast a weighted vote:\n\n``` # use cosmwasm_std::{ #     HexBinary, #     Storage, Api, Querier, DepsMut, Deps, entry_point, Env, StdError, MessageInfo, #     Response, QueryResponse, # }; # type ExecuteMsg = (); # #[cfg(feature = \"cosmwasm_1_2\")] use cosmwasm_std::{Decimal, GovMsg, VoteOption, WeightedVoteOption};\n\n# #[cfg(feature = \"cosmwasm_1_2\")] #[entry_point] pub fn execute( deps: DepsMut, env: Env, info: MessageInfo, msg: ExecuteMsg, ) -> Result<Response, StdError> { // ... Ok(Response::new().add_message(GovMsg::VoteWeighted { proposal_id: 4, options: vec![ WeightedVoteOption { option: VoteOption::Yes, weight: Decimal::percent(65), }, WeightedVoteOption { option: VoteOption::Abstain, weight: Decimal::percent(35), }, ], })) } ```",
        "oneOf": [
          {
            "description": "This maps directly to [MsgVote](https://github.com/cosmos/cosmos-sdk/blob/v0.42.5/proto/cosmos/gov/v1beta1/tx.proto#L46-L56) in the Cosmos SDK with voter set to the contract address.",
            "type": "object",
            "required": [
              "vote"
            ],
            "properties": {
              "vote": {
                "type": "object",
                "required": [
                  "proposal_id",
                  "vote"
                ],
                "properties": {
                  "proposal_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "vote": {
                    "description": "The vote option.\n\nThis should be called \"option\" for consistency with Cosmos SDK. Sorry for that. See <https://github.com/CosmWasm/cosmwasm/issues/1571>.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/VoteOption"
                      }
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "IbcMsg": {
        "description": "These are messages in the IBC lifecycle. Only usable by IBC-enabled contracts (contracts that directly speak the IBC protocol via 6 entry points)",
        "oneOf": [
          {
            "description": "Sends bank tokens owned by the contract to the given address on another chain. The channel must already be established between the ibctransfer module on this chain and a matching module on the remote chain. We cannot select the port_id, this is whatever the local chain has bound the ibctransfer module to.",
            "type": "object",
            "required": [
              "transfer"
            ],
            "properties": {
              "transfer": {
                "type": "object",
                "required": [
                  "amount",
                  "channel_id",
                  "timeout",
                  "to_address"
                ],
                "properties": {
                  "amount": {
                    "description": "packet data only supports one coin https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/ibc/applications/transfer/v1/transfer.proto#L11-L20",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Coin"
                      }
                    ]
                  },
                  "channel_id": {
                    "description": "existing channel to send the tokens over",
                    "type": "string"
                  },
                  "timeout": {
                    "description": "when packet times out, measured on remote chain",
                    "allOf": [
                      {
                        "$ref": "#/definitions/IbcTimeout"
                      }
                    ]
                  },
                  "to_address": {
                    "description": "address on the remote chain to receive these tokens",
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Sends an IBC packet with given data over the existing channel. Data should be encoded in a format defined by the channel version, and the module on the other side should know how to parse this.",
            "type": "object",
            "required": [
              "send_packet"
            ],
            "properties": {
              "send_packet": {
                "type": "object",
                "required": [
                  "channel_id",
                  "data",
                  "timeout"
                ],
                "properties": {
                  "channel_id": {
                    "type": "string"
                  },
                  "data": {
                    "$ref": "#/definitions/Binary"
                  },
                  "timeout": {
                    "description": "when packet times out, measured on remote chain",
                    "allOf": [
                      {
                        "$ref": "#/definitions/IbcTimeout"
                      }
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This will close an existing channel that is owned by this contract. Port is auto-assigned to the contract's IBC port",
            "type": "object",
            "required": [
              "close_channel"
            ],
            "properties": {
              "close_channel": {
                "type": "object",
                "required": [
                  "channel_id"
                ],
                "properties": {
                  "channel_id": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "IbcTimeout": {
        "description": "In IBC each package must set at least one type of timeout: the timestamp or the block height. Using this rather complex enum instead of two timeout fields we ensure that at least one timeout is set.",
        "type": "object",
        "properties": {
          "block": {
            "anyOf": [
              {
                "$ref": "#/definitions/IbcTimeoutBlock"
              },
              {
                "type": "null"
              }
            ]
          },
          "timestamp": {
            "anyOf": [
              {
                "$ref": "#/definitions/Timestamp"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "IbcTimeoutBlock": {
        "description": "IBCTimeoutHeight Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients. Ordering is (revision_number, timeout_height)",
        "type": "object",
        "required": [
          "height",
          "revision"
        ],
        "properties": {
          "height": {
            "description": "block height after which the packet times out. the height within the given revision",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "revision": {
            "description": "the version that the client is currently on (e.g. after resetting the chain this could increment 1 as height drops to 0)",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "PasskeyCredential": {
        "type": "object",
        "required": [
          "authenticator_data",
          "client_data",
          "id",
          "signature"
        ],
        "properties": {
          "authenticator_data": {
            "description": "webauthn Authenticator data",
            "allOf": [
              {
                "$ref": "#/definitions/Binary"
              }
            ]
          },
          "client_data": {
            "description": "Client data containg challenge, origin and type",
            "allOf": [
              {
                "$ref": "#/definitions/ClientData"
              }
            ]
          },
          "id": {
            "description": "Passkey id",
            "type": "string"
          },
          "pubkey": {
            "description": "Public key is essential for verification but can be supplied on the backend / contract side and omitted by client. Must be set when going through the verification process.",
            "anyOf": [
              {
                "$ref": "#/definitions/Binary"
              },
              {
                "type": "null"
              }
            ]
          },
          "signature": {
            "description": "Secp256r1 signature",
            "allOf": [
              {
                "$ref": "#/definitions/Binary"
              }
            ]
          },
          "user_handle": {
            "description": "Optional user handle reserved for future use",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "additionalProperties": false
      },
      "RegistryParams_for_Nullable_Empty": {
        "type": "object",
        "required": [
          "allowed_code_ids",
          "creation_fees",
          "managers"
        ],
        "properties": {
          "allowed_code_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "creation_fees": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          },
          "extension": {
            "anyOf": [
              {
                "$ref": "#/definitions/Empty"
              },
              {
                "type": "null"
              }
            ]
          },
          "managers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "StakingMsg": {
        "description": "The message types of the staking module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto",
        "oneOf": [
          {
            "description": "This is translated to a [MsgDelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L81-L90). `delegator_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "delegate"
            ],
            "properties": {
              "delegate": {
                "type": "object",
                "required": [
                  "amount",
                  "validator"
                ],
                "properties": {
                  "amount": {
                    "$ref": "#/definitions/Coin"
                  },
                  "validator": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This is translated to a [MsgUndelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L112-L121). `delegator_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "undelegate"
            ],
            "properties": {
              "undelegate": {
                "type": "object",
                "required": [
                  "amount",
                  "validator"
                ],
                "properties": {
                  "amount": {
                    "$ref": "#/definitions/Coin"
                  },
                  "validator": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This is translated to a [MsgBeginRedelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L95-L105). `delegator_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "redelegate"
            ],
            "properties": {
              "redelegate": {
                "type": "object",
                "required": [
                  "amount",
                  "dst_validator",
                  "src_validator"
                ],
                "properties": {
                  "amount": {
                    "$ref": "#/definitions/Coin"
                  },
                  "dst_validator": {
                    "type": "string"
                  },
                  "src_validator": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SudoMsg": {
        "oneOf": [
          {
            "description": "updating the entire registry params object",
            "type": "object",
            "required": [
              "update_params"
            ],
            "properties": {
              "update_params": {
                "$ref": "#/definitions/RegistryParams_for_Nullable_Empty"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "updating the list of code ids that are allowed for account creation & migration",
            "type": "object",
            "required": [
              "update_allowed_code_ids"
            ],
            "properties": {
              "update_allowed_code_ids": {
                "type": "object",
                "required": [
                  "code_ids"
                ],
                "properties": {
                  "code_ids": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "manager contracts that can update an owner for an account if the latter is the new holder of the bound NFT",
            "type": "object",
            "required": [
              "update_managers"
            ],
            "properties": {
              "update_managers": {
                "type": "object",
                "required": [
                  "managers"
                ],
                "properties": {
                  "managers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "TokenAccount_for_ExecuteAccountMsg": {
        "description": "An extenstion for [cw83::CreateAccountMsg]",
        "type": "object",
        "required": [
          "credential_data",
          "token_info"
        ],
        "properties": {
          "actions": {
            "description": "Actions to execute immediately on the account creation",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/ExecuteAccountMsg"
            }
          },
          "create_for": {
            "description": "Optional parameter to create an account on behalf of another user that holds the token",
            "type": [
              "string",
              "null"
            ]
          },
          "credential_data": {
            "description": "Account data used for (cw81 signature verification)",
            "allOf": [
              {
                "$ref": "#/definitions/CredentialData"
              }
            ]
          },
          "token_info": {
            "description": "Non-Fungible Token Info that the created account will be linked to",
            "allOf": [
              {
                "$ref": "#/definitions/TokenInfo"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "TokenInfo": {
        "type": "object",
        "required": [
          "collection",
          "id"
        ],
        "properties": {
          "collection": {
            "description": "Contract address of the collection",
            "type": "string"
          },
          "id": {
            "description": "Token id",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      },
      "UpdateOperation_for_CredentialData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "add"
            ],
            "properties": {
              "add": {
                "$ref": "#/definitions/CredentialData"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "remove"
            ],
            "properties": {
              "remove": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "VoteOption": {
        "type": "string",
        "enum": [
          "yes",
          "no",
          "abstain",
          "no_with_veto"
        ]
      },
      "WasmMsg": {
        "description": "The message types of the wasm module.\n\nSee https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto",
        "oneOf": [
          {
            "description": "Dispatches a call to another contract at a known address (with known ABI).\n\nThis is translated to a [MsgExecuteContract](https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto#L68-L78). `sender` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "execute"
            ],
            "properties": {
              "execute": {
                "type": "object",
                "required": [
                  "contract_addr",
                  "funds",
                  "msg"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  },
                  "funds": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "msg": {
                    "description": "msg is the json-encoded ExecuteMsg struct (as raw Binary)",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      }
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Instantiates a new contracts from previously uploaded Wasm code.\n\nThe contract address is non-predictable. But it is guaranteed that when emitting the same Instantiate message multiple times, multiple instances on different addresses will be generated. See also Instantiate2.\n\nThis is translated to a [MsgInstantiateContract](https://github.com/CosmWasm/wasmd/blob/v0.29.2/proto/cosmwasm/wasm/v1/tx.proto#L53-L71). `sender` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "instantiate"
            ],
            "properties": {
              "instantiate": {
                "type": "object",
                "required": [
                  "code_id",
                  "funds",
                  "label",
                  "msg"
                ],
                "properties": {
                  "admin": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "code_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "funds": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "label": {
                    "description": "A human-readable label for the contract.\n\nValid values should: - not be empty - not be bigger than 128 bytes (or some chain-specific limit) - not start / end with whitespace",
                    "type": "string"
                  },
                  "msg": {
                    "description": "msg is the JSON-encoded InstantiateMsg struct (as raw Binary)",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      }
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Migrates a given contracts to use new wasm code. Passes a MigrateMsg to allow us to customize behavior.\n\nOnly the contract admin (as defined in wasmd), if any, is able to make this call.\n\nThis is translated to a [MsgMigrateContract](https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto#L86-L96). `sender` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "migrate"
            ],
            "properties": {
              "migrate": {
                "type": "object",
                "required": [
                  "contract_addr",
                  "msg",
                  "new_code_id"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  },
                  "msg": {
                    "description": "msg is the json-encoded MigrateMsg struct that will be passed to the new code",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      }
                    ]
                  },
                  "new_code_id": {
                    "description": "the code_id of the new logic to place in the given contract",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Sets a new admin (for migrate) on the given contract. Fails if this contract is not currently admin of the target contract.",
            "type": "object",
            "required": [
              "update_admin"
            ],
            "properties": {
              "update_admin": {
                "type": "object",
                "required": [
                  "admin",
                  "contract_addr"
                ],
                "properties": {
                  "admin": {
                    "type": "string"
                  },
                  "contract_addr": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Clears the admin on the given contract, so no more migration possible. Fails if this contract is not currently admin of the target contract.",
            "type": "object",
            "required": [
              "clear_admin"
            ],
            "properties": {
              "clear_admin": {
                "type": "object",
                "required": [
                  "contract_addr"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Query params of the registry",
        "type": "object",
        "required": [
          "registry_params"
        ],
        "properties": {
          "registry_params": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "admin"
        ],
        "properties": {
          "admin": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "account_info"
        ],
        "properties": {
          "account_info": {
            "$ref": "#/definitions/TokenInfo"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "accounts"
        ],
        "properties": {
          "accounts": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "query": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/AccountsQueryMsg"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "skip": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AccountsQueryMsg": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "collection"
            ],
            "properties": {
              "collection": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "collections"
            ],
            "properties": {
              "collections": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "TokenInfo": {
        "type": "object",
        "required": [
          "collection",
          "id"
        ],
        "properties": {
          "collection": {
            "description": "Contract address of the collection",
            "type": "string"
          },
          "id": {
            "description": "Token id",
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "sudo": null,
  "responses": {
    "account_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AccountResponse_for_TokenInfo",
      "description": "Response type for QueryMsg::AccountInfo defined by cw83 for account registries",
      "type": "object",
      "required": [
        "address",
        "info"
      ],
      "properties": {
        "address": {
          "description": "smart contract address of the matched account",
          "type": "string"
        },
        "info": {
          "description": "additional information about the account",
          "allOf": [
            {
              "$ref": "#/definitions/TokenInfo"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "TokenInfo": {
          "type": "object",
          "required": [
            "collection",
            "id"
          ],
          "properties": {
            "collection": {
              "description": "Contract address of the collection",
              "type": "string"
            },
            "id": {
              "description": "Token id",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "accounts": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AccountsResponse_for_Nullable_TokenInfo",
      "description": "Response type for QueryMsg::Accounts { query         :    T, start_after   :    Option<String>, skip          :    Option<u32>, limit         :    Option<u32>, } defined by cw83 for account registries",
      "type": "object",
      "required": [
        "accounts",
        "total"
      ],
      "properties": {
        "accounts": {
          "description": "List of the accounts matching the query",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountResponse_for_Nullable_TokenInfo"
          }
        },
        "total": {
          "description": "Total number of accounts in the registry",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AccountResponse_for_Nullable_TokenInfo": {
          "description": "Response type for QueryMsg::AccountInfo defined by cw83 for account registries",
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "description": "smart contract address of the matched account",
              "type": "string"
            },
            "info": {
              "description": "additional information about the account",
              "anyOf": [
                {
                  "$ref": "#/definitions/TokenInfo"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "TokenInfo": {
          "type": "object",
          "required": [
            "collection",
            "id"
          ],
          "properties": {
            "collection": {
              "description": "Contract address of the collection",
              "type": "string"
            },
            "id": {
              "description": "Token id",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "admin": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AdminResponse",
      "description": "Returned from Admin.query_admin()",
      "type": "object",
      "properties": {
        "admin": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "registry_params": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RegistryParams_for_Nullable_Empty",
      "type": "object",
      "required": [
        "allowed_code_ids",
        "creation_fees",
        "managers"
      ],
      "properties": {
        "allowed_code_ids": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "creation_fees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "extension": {
          "anyOf": [
            {
              "$ref": "#/definitions/Empty"
            },
            {
              "type": "null"
            }
          ]
        },
        "managers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Empty": {
          "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
          "type": "object"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
